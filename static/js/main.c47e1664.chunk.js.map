{"version":3,"sources":["components/Cards/Cards.js","components/Jumbotron/index.js","components/Navbar/index.js","App.js","serviceWorker.js","index.js"],"names":["style","dream","height","width","CardImages","props","react_default","a","createElement","className","id","alt","src","image","name","location","onClick","removeVacation","Jumbotron","Navbar","counter","App","state","cardcontent","deleted","vacationLocation","shuffle","_this","setState","handleIncrement","console","log","_this2","this","components_Navbar","components_Jumbotron","map","element","Cards","key","React","Component","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ilGAMUA,SAAO,CACTC,MAAM,CACNC,OAAO,IACPC,MAAM,OA8BCC,MAxBf,SAAoBC,GAChB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,OAAKE,GAAG,QAAQV,MAAOA,EAAMC,MAAOU,IAAKN,EAAMM,IAAKC,IAAKP,EAAMQ,SAEnEP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,qBAAqBH,EAAMK,IAE/BJ,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,uBAAuBH,EAAMS,MAEjCR,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,2BAA2BH,EAAMU,YAI7CT,EAAAC,EAAAC,cAAA,QAAMC,UAAU,SAAUO,QAAS,kBAAKX,EAAMY,eAAeZ,EAAMK,MAAnE,yBCtBGQ,MAVf,SAAmBb,GACf,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,mBACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,kGCkBDU,MAnBf,SAAgBd,GACZ,OACIC,EAAAC,EAAAC,cAAA,OAAKE,GAAG,mBACJJ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,8BACVH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBACVH,EAAAC,EAAAC,cAAA,yBAEJF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACVH,EAAAC,EAAAC,cAAA,oBAAYH,EAAMe,UAEtBd,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAGdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gCCiDfY,6MApCbC,MAAQ,CACNC,cACAC,SAAS,EACTJ,QAAQ,KAGVH,eAAiB,SAAAP,GACf,IAAMe,EAAmBC,IAAQC,EAAKL,MAAMC,aAE5CI,EAAKC,SAAS,CAACL,YAAYE,IAC3BE,EAAKE,qBAGPA,gBAAkB,WAChBF,EAAKC,SAAS,CAACR,QAAQO,EAAKL,MAAMF,QAAS,IAC5CU,QAAQC,IAAIJ,EAAKL,MAAMF,kFAGf,IAAAY,EAAAC,KACP,OACE3B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC0B,EAAD,CAAQd,QAASa,KAAKX,MAAMF,UAC5Bd,EAAAC,EAAAC,cAAC2B,EAAD,MACCF,KAAKX,MAAMC,YAAYa,IAAI,SAAAC,GAAY,OAAM/B,EAAAC,EAAAC,cAAC8B,EAAD,CAC9CrB,eAAkBe,EAAKf,eACvBJ,MAAOwB,EAAQxB,MACf0B,IAAKF,EAAQ3B,GACbA,GAAI2B,EAAQ3B,GACZI,KAAMuB,EAAQvB,KACdC,SAAUsB,EAAQtB,qBA9BRyB,IAAMC,WCnBJC,QACW,cAA7BC,OAAO5B,SAAS6B,UAEe,UAA7BD,OAAO5B,SAAS6B,UAEhBD,OAAO5B,SAAS6B,SAASC,MACvB,2DCZNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c47e1664.chunk.js","sourcesContent":["import React from \"react\";\nimport './style.css'\n// import { throws } from \"assert\";\n\n\n\n    const style ={\n        dream:{\n        height:225,\n        width:225\n        }\n    }\n    \n\n\nfunction CardImages(props) {\n    return (\n        <div className=\"card\">\n            <div className=\"img-container\">\n                <img id=\"dream\" style={style.dream} alt={props.alt} src={props.image} />\n            </div>\n            <div className=\"content\">\n                <ul>\n                    <li>\n                        <strong>Id:</strong>{props.id}\n                    </li>\n                    <li>\n                        <strong>Name:</strong>{props.name}\n                    </li>\n                    <li>\n                        <strong>location:</strong>{props.location}\n                    </li>\n                </ul>\n            </div>\n            <span className=\"remove\"  onClick={()=> props.removeVacation(props.id)}>ùòÖ</span>\n        </div>\n    )\n}\n\nexport default CardImages;","import React from \"react\";\n\nfunction Jumbotron(props) {\n    return (\n        <div className=\"jumbotron jumbotron-fluid\">\n            <div className=\"container\">\n                <h1 className=\"display-4\">Fluid jumbotron</h1>\n                <p className=\"lead\">This is a modified jumbotron that occupies the entire horizontal space of its parent.</p>\n            </div>\n        </div>\n    )\n}\nexport default Jumbotron; ","import React from \"react\";\nimport \"./style.css\"\n\n\n\n\nfunction Navbar(props) {\n    return (\n        <div id=\"backgroundColor\">\n            <ul className=\"nav justify-content-center\">\n                <li className=\"nav-item mr-5\">\n                    <p>Clicky Game</p>\n                </li>\n                <li className=\"nav-item\">\n                    <p>Counter:{props.counter}</p>\n                </li>\n                <li className=\"nav-item\">\n\n                </li>\n                <li className=\"nav-item\">\n                </li>\n            </ul>\n        </div>\n    )\n}\nexport default Navbar; ","import React from 'react';\n\nimport Cards from \"./components/Cards/Cards\";\nimport cardcontent from \"./cardcontent.json\"\nimport Jumbotron from \"./components/Jumbotron\"\nimport Navbar from \"./components/Navbar\"\n// import Counter from \"./components/Navbar/Counter\"\nimport shuffle from \"shuffle-array\"; \n\n\n\n\n\n// function App() {\n//   return (\n//   <div>\n//   <Navbar />\n//   <Counter />\n//   <Jumbotron />\n//   <Cards/>\n\n\n\n//   </div>)\n//   ;\n// }\n\n// export default App;\n\n\n\nclass App extends React.Component {\n  state = {\n    cardcontent,\n    deleted: false,\n    counter:0\n  };\n   \n  removeVacation = id => {\n    const vacationLocation = shuffle(this.state.cardcontent);\n\n    this.setState({cardcontent:vacationLocation})\n    this.handleIncrement();\n  }\n\n  handleIncrement = () => {\n    this.setState({counter:this.state.counter +1})\n   console.log(this.state.counter);\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar counter={this.state.counter}/>\n        <Jumbotron/>\n        {this.state.cardcontent.map(element => {return<Cards \n        removeVacation = {this.removeVacation}\n        image={element.image} \n        key={element.id} \n        id={element.id} \n        name={element.name}  \n        location={element.location}/>})}\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}