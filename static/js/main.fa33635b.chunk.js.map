{"version":3,"sources":["components/Cards/Cards.js","components/Jumbotron/index.js","components/Navbar/index.js","App.js","serviceWorker.js","index.js"],"names":["style","dream","height","width","border","CardImages","props","react_default","a","createElement","className","id","alt","src","image","onClick","wasPicked","picked","jumbotron","backgroundColor","Jumbotron","name","message","Navbar","counter","highscore","App","state","cardcontent","waspicked","shuffleVacation","vacationLocation","shuffle","_this","setState","handleIncrement","includes","push","console","log","_this2","this","components_Navbar","components_Jumbotron","map","element","i","Cards","key","location","React","Component","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fa33635b.chunk.js","sourcesContent":["import React from \"react\";\nimport './style.css'\n\n    const style ={\n        dream:{\n            height: 325,\n            width: 325,\n            border: '1px solid green',\n        }\n    }\n    \nfunction CardImages(props) {\n    return (\n\n        \n        <div className=\"card\">\n            <div className=\"content\">\n            <img id=\"dream\" style={style.dream} alt={props.alt} src={props.image} />\n            </div>\n            {/* <span className=\"remove\"  onClick={()=> \n                props.shuffleVacation(props.id) \n                } >ùòÖ</span> */}\n                <span className=\"remove\"  \n                onClick={() => props.wasPicked(props.id,props.picked) \n                } >ùòÖ</span>\n        </div>\n    )\n\n\n\n\n}\n\n\n\nexport default CardImages;","import React from \"react\";\n\nconst style ={\n    jumbotron:{\nheight:100,\nbackgroundColor:  \"#f69d3c\"\n    }\n}\n\n\n\nfunction Jumbotron(props) {\n    return (\n        <div className=\"jumbotron jumbotron-fluid mb-3\" style={style.jumbotron}>\n            <div className=\"container\">\n                <h1 className=\"display-4\" >{props.name}</h1>\n                <p>{props.name}</p>\n                <p className=\"lead\">{props.message} </p>\n            </div>\n        </div>\n    )\n}\nexport default Jumbotron; ","import React from \"react\";\nimport \"./style.css\"\n\n\n\n\nfunction Navbar(props) {\n    return (\n        <div id=\"backgroundColor\">\n            <ul className=\"nav justify-content-center\">\n                <li className=\"nav-item mr-5\">\n                    <p>Clicky Game</p>\n                </li>\n                <li className=\"nav-item mr-4\">\n                    <p>Counter: {props.counter}</p>\n                </li>\n                <li className=\"nav-item \">\n                    <p>High Score: {props.highscore}</p>\n                </li>\n                <li className=\"nav-item\">\n                </li>\n            </ul>\n        </div>\n    )\n}\nexport default Navbar; ","import React from 'react';\nimport \"./App.css\"\nimport Cards from \"./components/Cards/Cards\";\nimport cardcontent from \"./cardcontent.json\"\nimport Jumbotron from \"./components/Jumbotron\"\nimport Navbar from \"./components/Navbar\"\n// import Counter from \"./components/Navbar/Counter\"\nimport shuffle from \"shuffle-array\";\n\n\nclass App extends React.Component {\n\n\n  state = {\n    cardcontent,\n    counter: 0,\n    waspicked:[],\n    message: \"\",\n    highscore: 0\n  }\n\n  shuffleVacation = id => {\n    const vacationLocation = shuffle(this.state.cardcontent);\n    this.setState({ cardcontent: vacationLocation })\n  }\n\n  \n  handleIncrement = () => {\n    this.setState({ counter: this.state.counter + 1 })\n    this.setState({ highscore: this.state.highscore + 1 })\n  }\n\n  wasPicked = (id, picked) => {\n    if(this.state.waspicked.includes(id)){\n      this.shuffleVacation();\n      this.setState({\n        counter:0,\n        message:\"you guessed incorrectly\"\n      })\n    }else {    \n    this.state.waspicked.push(id)\n    console.log(\"this state was picked\", this.state.waspicked);\n    this.shuffleVacation();\n    this.handleIncrement();\n    this.setState({\n    message:\"you guessed correctly\"\n    })\n    }\n  }\n  \n\n\n  render() {\n    return (\n      <div>\n        <Navbar counter={this.state.counter} highscore={this.state.highscore} />\n        <Jumbotron message={this.state.message}  />\n        <div className=\"container justify-content-between\">\n          {this.state.cardcontent.map((element, i) => {\n            return <Cards\n              shuffleVacation={this.shuffleVacation}\n              image={element.image}\n              key={element.id}\n              id={element.id}\n              name={element.name}\n              location={element.location}\n              picked={element.picked}\n              wasPicked={this.wasPicked}\n            />\n          })}\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}